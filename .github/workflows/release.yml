# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Chris <goabonga@pm.me>

name: Main Branch Release

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  id-token: write

env:
  GH_USERNAME: Chris
  GH_EMAIL: goabonga@pm.me
  GH_REPO_URL: https://goabonga:${{ secrets.GH_TOKEN }}@github.com/goabonga/release-lab.git
  PYTHON_DEFAULT_VERSION: "3.11"
  POETRY_VERSION: "2.1.1"

jobs:

  test:
    name: Test and Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    outputs:
      bump_made: ${{ steps.bump_check.outputs.bump_made }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üõ†Ô∏è Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: üì¶ Install dependencies
        run: poetry install --with dev

      - name: üîç Checking SPDX license headers
        run: |
          poetry run python ./scripts/add_license_header.py --path src --types py --check
          poetry run python ./scripts/add_license_header.py --path tests --types py --check

      - name: üßπ Check import sorting with isort
        run: poetry run isort . --check-only --diff

      - name: üîé Type check with MyPy
        run: poetry run mypy src/ tests/

      - name: üîÑ Temporary bump for tests
        id: bump_check
        run: |
          if poetry run cz bump --yes --files-only; then
            echo "bump_made=true" >> "$GITHUB_OUTPUT"
          else
            echo "bump_made=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
      - name: üß™ Run tests
        id: run_tests
        run: poetry run pytest --cov

      - name: üì§ Upload coverage reports to Codecov
        if: matrix.python-version == '3.13' && steps.run_tests.outcome == 'success' 
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: üì§ Upload test results to Codecov
        if: matrix.python-version == '3.13' && steps.run_tests.outcome == 'success' 
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  bump_and_build:
    name: Bump version and build package
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.bump_made == 'true'
    outputs:
      bump_made: ${{ steps.bump_check.outputs.bump_made }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: üîë Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: üîì Unlock GPG key
        run: |
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback -s >/dev/null
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: üîß Configure Git user
        run: |
          git config --global user.name "${{ env.GH_USERNAME }}"
          git config --global user.email "${{ env.GH_EMAIL }}"
          git config --global user.signingkey "$(gpg --list-secret-keys --keyid-format=LONG | grep sec | awk '{print $2}' | cut -d/ -f2)"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          
      - name: üõ†Ô∏è Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: üì¶ Install dependencies
        run: poetry install --with dev

      - name: üöÄ Bump version with Commitizen
        id: bump_check
        run: |
          if poetry run cz bump --yes --changelog; then
            echo "bump_made=true" >> "$GITHUB_OUTPUT"
          else
            echo "No version bump needed."
            echo "bump_made=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: üì¶ Get bumped version
        id: get_version
        run: |
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: üß± Build distribution
        run: poetry build

      - name: ‚úÇÔ∏è Extract latest changelog section
        run: |
          awk '/^## /{i++} i==1' CHANGELOG.md > LATEST_CHANGELOG.md

      - name: üì§ Push version bump and tag
        run: |
          git remote set-url origin ${{ env.GH_REPO_URL }}
          git push origin HEAD
          git push origin --tags

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-files
          path: |
            dist/*
            LATEST_CHANGELOG.md

  github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: bump_and_build
    if: needs.bump_and_build.outputs.bump_made == 'true'
    steps:
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-files
          path: .

      - name: üöÄ Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.bump_and_build.outputs.version }}
          name: Release v${{ needs.bump_and_build.outputs.version }}
          body_path: LATEST_CHANGELOG.md
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  deploy_docs:
    name: Deploy MkDocs
    runs-on: ubuntu-latest
    needs: 
      - github_release
      - bump_and_build
    if: needs.bump_and_build.outputs.bump_made == 'true'
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            ref: main

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: üõ†Ô∏è Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: üì¶ Install dependencies
        run: poetry install --with dev

      - name: üîë Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: üîì Unlock GPG key
        run: |
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback -s >/dev/null
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: üîß Configure Git user
        run: |
          git config --global user.name "${{ env.GH_USERNAME }}"
          git config --global user.email "${{ env.GH_EMAIL }}"
          git config --global user.signingkey "$(gpg --list-secret-keys --keyid-format=LONG | grep sec | awk '{print $2}' | cut -d/ -f2)"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true

      - name: üèóÔ∏è Build docs with MkDocs
        run: poetry run mkdocs build
        env:
          DOC_VERSION: ${{ needs.bump_and_build.outputs.version }}

      - name: üìÇ Clone gh-pages branch
        run: |
          git clone --depth=1 --branch gh-pages ${{ env.GH_REPO_URL }} gh-pages
          rm -rf gh-pages/*
          cp -r site/* gh-pages/
          touch gh-pages/.nojekyll

      - name: ‚úÖ Commit & push signed docs
        run: |
          cd gh-pages
          git add .
          git commit -S -m "docs: publish docs for v${{ needs.bump_and_build.outputs.version }}"
          git remote set-url origin ${{ env.GH_REPO_URL }}
          git push origin gh-pages

  publish_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: github_release
    if: needs.bump_and_build.outputs.bump_made == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/release-lab
    #environment:
    #  name: pypi
    #  url: https://pypi.org/p/release-lab
    steps:
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-files
          path: .

      - name: üì¶ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/ # for pypi test