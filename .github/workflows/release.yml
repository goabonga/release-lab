# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Chris <goabonga@pm.me>

name: Main Branch Release

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  id-token: write

jobs:

  test:
    name: Test and Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    outputs:
      bump_made: ${{ steps.bump_check.outputs.bump_made }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 🛠️ Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.2"

      - name: 📦 Install dependencies
        run: poetry install --with dev

      - name: 🔍 Checking SPDX license headers
        run: |
          poetry run python ./scripts/add_license_header.py --path src --types py --check
          poetry run python ./scripts/add_license_header.py --path tests --types py --check

      - name: 🧹 Check import sorting with isort
        run: poetry run isort . --check-only --diff

      - name: 🔎 Type check with MyPy
        run: poetry run mypy src/ tests/

      - name: 🔄 Temporary bump for tests
        id: bump_check
        run: |
          if poetry run cz bump --yes --files-only; then
            echo "bump_made=true" >> "$GITHUB_OUTPUT"
          else
            echo "bump_made=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
      - name: 🧪 Run tests
        id: run_tests
        run: poetry run pytest --cov

      - name: 📤 Upload coverage reports to Codecov
        if: matrix.python-version == '3.13' && steps.run_tests.outcome == 'success' && steps.bump_check.outputs.bump_made == 'false'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: goabonga/release-lab

      - name: 📤 Upload test results to Codecov
        if: matrix.python-version == '3.13' && steps.run_tests.outcome == 'success' && steps.bump_check.outputs.bump_made == 'false'
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 📦 Upload coverage report as artifact
        if: matrix.python-version == '3.13' && steps.run_tests.outcome == 'success' && steps.bump_check.outputs.bump_made == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

      - name: 📦 Upload junit report as artifact
        if: matrix.python-version == '3.13' && steps.run_tests.outcome == 'success' && steps.bump_check.outputs.bump_made == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: junit
          path: junit.xml

  bump_and_build:
    name: Bump version and build package
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.bump_made == 'true'
    outputs:
      bump_made: ${{ steps.bump_check.outputs.bump_made }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 🔑 Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          git config --global user.signingkey "$(gpg --list-secret-keys --keyid-format=LONG | grep sec | awk '{print $2}' | cut -d/ -f2)"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: 🔓 Unlock GPG key
        run: |
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback -s >/dev/null
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: 🔧 Configure Git user
        run: |
          git config --global user.name "Chris"
          git config --global user.email "goabonga@pm.me"

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 🛠️ Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.2"

      - name: 📦 Install dependencies
        run: poetry install --with dev

      - name: 🚀 Bump version with Commitizen
        id: bump_check
        run: |
          if poetry run cz bump --yes --changelog; then
            echo "bump_made=true" >> "$GITHUB_OUTPUT"
          else
            echo "No version bump needed."
            echo "bump_made=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 📦 Get bumped version
        id: get_version
        run: |
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

#      - name: 📦 Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: release
#          path: .
#
#  build_and_tag:
#    name: Build & Tag
#    runs-on: ubuntu-latest
#    needs: bump_version
#    if: needs.bump_version.outputs.bump_made == 'true'
#    steps:
#      - name: ⬇️ Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: 📥 Download coverage artifact (Python 3.13)
#        uses: actions/download-artifact@v4
#        with:
#          name: release
#          path: .
#
#
#      - name: 🐍 Setup Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: "3.11"
#
#      - name: 🛠️ Install Poetry
#        uses: abatilo/actions-poetry@v3
#        with:
#          poetry-version: "1.8.2"
#
#      - name: 📦 Install dependencies
#        run: poetry install --with dev
#
      - name: 🧱 Build distribution
        run: poetry build

      - name: ✂️ Extract latest changelog section
        run: |
          awk '/^## /{i++} i==1' CHANGELOG.md > LATEST_CHANGELOG.md

      - name: 📤 Push version bump and tag
        run: |
          git remote set-url origin https://goabonga:${GH_TOKEN}@github.com/goabonga/release-lab.git
          git push origin HEAD
          git push origin --tags
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-files
          path: |
            dist/*
            LATEST_CHANGELOG.md

  codecov_tag:
    name: Upload coverage to Codecov (tag)
    runs-on: ubuntu-latest
    needs: 
      - test
      - bump_and_build
    if: needs.bump_and_build.outputs.bump_made == 'true'
    steps:
      - name: 📥 Download coverage artifact (Python 3.13)
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .

      - name: 📥 Download coverage artifact (Python 3.13)
        uses: actions/download-artifact@v4
        with:
          name: junit
          path: .

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: goabonga/release-lab
          files: coverage.xml
          flags: v${{ needs.bump_and_build.outputs.version }}
          name: v${{ needs.bump_and_build.outputs.version }}

      - name: 📤 Upload test results to Codecov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: goabonga/release-lab
          files: junit.xml
          flags: v${{ needs.bump_and_build.outputs.version }}
          name: v${{ needs.bump_and_build.outputs.version }}

  github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    #needs: bump_and_build
    #if: needs.bump_and_build.outputs.bump_made == 'true'
    needs: bump_and_build
    if: needs.bump_and_build.outputs.bump_made == 'true'
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-files
          path: .

      - name: 🏷️ Get version from dist
        id: get_version
        run: |
          VERSION=$(ls dist | grep -oP 'release_lab-\K[0-9]+\.[0-9]+\.[0-9]+'| head -n 1)
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: 🚀 Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: LATEST_CHANGELOG.md
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  deploy_docs:
    name: Deploy MkDocs
    runs-on: ubuntu-latest
    #needs: github_release
    #if: needs.bump_and_build.outputs.bump_made == 'true'
    needs: github_release
    if: needs.bump_and_build.outputs.bump_made == 'true'
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
            ref: main

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 🛠️ Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.2"

      - name: 📦 Install dependencies
        run: poetry install --with dev

      - name: 🔧 Configure Git user
        run: |
          git config --global user.name "Chris"
          git config --global user.email "goabonga@pm.me"

      - name: 🏷️ Get current tag
        id: tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: 📚 Deploy MkDocs to GitHub Pages
        run: poetry run mkdocs gh-deploy --force
        env:
          DOC_VERSION: ${{ env.TAG }}

  publish_testpypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    #needs: github_release
    #if: needs.bump_and_build.outputs.bump_made == 'true'
    needs: github_release
    if: needs.bump_and_build.outputs.bump_made == 'true'
    #environment:
    #  name: pypi
    #  url: https://pypi.org/p/release-lab
    environment:
      name: testpypi
      url: https://test.pypi.org/p/release-lab
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-files
          path: .

      - name: 📦 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/